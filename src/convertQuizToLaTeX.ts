import * as os from 'os'
import { GIFTQuestion, TextFormat } from "gift-pegjs";

export function convertQuizToLaTeX(quiz: GIFTQuestion[], points: string, shuffle: boolean, isLyX: boolean, convertMarkdown: boolean, isQuarto: boolean, nestLevel: string): string {
    // console.info(`arguments: ${JSON.stringify({ points, shuffle, isLyX, convertMarkdown, isQuarto, nestLevel })}`);
    const questionsTag = (isLyX ? "myquestions" : "questions");
    const questionTag = (isLyX ? "\\myquestion" : isQuarto ? "_q" : "\\question");
    const partTag = (isQuarto ? "_p" : "\\part");
    const subpartTag = (isQuarto ? "_s" : "\\subpart");
    const nestedQuestionTag = (nestLevel === "none" ? questionTag : (nestLevel === "part" ? partTag : subpartTag));
    const nestedQuestionsTag = (nestLevel === "none" ? questionsTag : (nestLevel === "part" ? "parts" : "subparts"));
    const choiceTag = (isQuarto ? "_c" : "\\choice");
    const correctChoiceTag = (isQuarto ? "_C" : "\\CorrectChoice");
    const questionPoints = (points ? points : "1");
    let result = []
    let commentString = `LaTeX generated by gift2latex (npm package)`;
    result.push(isQuarto ? `<!--${commentString} -->` : `% ${commentString}`); // comment string for LaTeX
    result.push(isQuarto ? `\n:::: ${nestedQuestionsTag}` : `\\begin{${nestedQuestionsTag}}`); // blank line for questions div in Quarto

    for (let question of quiz) {
        switch (question.type) {
            case "MC":
                let useMarkdown = convertMarkdown && (question.stem.format === 'markdown')
                result.push(`${nestedQuestionTag}${(isQuarto ? "{" : "[")}${questionPoints}${(isQuarto ? "}" : "]")}`);
                if (useMarkdown) result.push('\\begin{markdown}')
                result.push(question.stem.text.replace(/\\n/g, os.EOL));
                if (useMarkdown) result.push('\\end{markdown}')
                result.push(isQuarto ? "\n::: choices" : "\\begin{choices}"); // blank line for choices div in Quarto
                // https://stackoverflow.com/a/46545530/1168342
                let choices = shuffle ? question.choices.map((a) => ({ sort: Math.random(), value: a }))
                    .sort((a, b) => a.sort - b.sort)
                    .map((a) => a.value) : question.choices;
                for (let choice of choices) {
                    result.push((choice.isCorrect ? correctChoiceTag : choiceTag))
                    if (useMarkdown) result.push('\\begin{markdown}')
                    result.push(choice.text.text.replace(/\\n/g, os.EOL));
                    if (useMarkdown) result.push('\\end{markdown}')
                }
                result.push(isQuarto ? ":::" : "\\end{choices}");
                break;
            default:
                console.error(`Skipping question ${question.title} because its type ${question.type} is not supported.`);
                break;
        }
    }
    result.push(isQuarto ? "::::" : `\\end{${nestedQuestionsTag}}`);
    return result.join(os.EOL);
}
