import * as os from 'os'
import { GIFTQuestion, TextFormat } from "gift-pegjs";

export function convertQuizToLaTeX(quiz: GIFTQuestion[], points: string, shuffle: boolean, isLyX: boolean, convertMarkdown: boolean): string {
    const questionsTag = (isLyX ? "myquestions" : "questions");
    const questionTag = (isLyX ? "myquestion" : "question");
    const questionPoints = (points ? points : "1");
    let result = []
    result.push("% LaTeX generated by gift2latex (npm package)");
    result.push(`\\begin{${questionsTag}}`);

    for (let question of quiz) {
        switch (question.type) {
            case "MC":
                let useMarkdown = convertMarkdown && (question.stem.format === 'markdown')
                result.push(`\\${questionTag}[${questionPoints}]`)
                if (useMarkdown) result.push('\\begin{markdown}')
                result.push(question.stem.text);
                if (useMarkdown) result.push('\\end{markdown}')
                result.push("\\begin{choices}");
                // https://stackoverflow.com/a/46545530/1168342
                let choices = shuffle ? question.choices.map((a) => ({ sort: Math.random(), value: a }))
                    .sort((a, b) => a.sort - b.sort)
                    .map((a) => a.value) : question.choices;
                for (let choice of choices) {
                    result.push("\\" + (choice.isCorrect ? "CorrectChoice" : "choice"))
                    if (useMarkdown) result.push('\\begin{markdown}')
                    result.push(choice.text.text);
                    if (useMarkdown) result.push('\\end{markdown}')
                }
                result.push("\\end{choices}");
                break;
            default:
                console.error(`Skipping question ${question.title} because its type ${question.type} is not supported.`);
                break;
        }
    }
    result.push(`\\end{${questionsTag}}`);
    return result.join(os.EOL);
}
