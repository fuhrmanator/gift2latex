#!/usr/bin/env node

import { parse, GIFTQuestion, QuestionType } from "gift-pegjs";
import yargs, { Argv, exit } from "yargs";
import { readFileSync } from 'fs';

const argv = yargs
    .alias('i', 'input')
    .alias('s', 'shuffle')
    .alias('p', 'points')
    .alias('L', 'lyxexam')  // support for including in a lyx file (myquestions hack at https://github.com/fuhrmanator/lyx-layouts)
    .demandOption('input').argv;

const questions = readFileSync(argv.input as string, 'utf8');

const quiz: GIFTQuestion[] = parse(questions)

const questionTag = (argv.lyxexam ? "myquestion" : "question");
const questionPoints = (argv.points ? argv.points : "1");

console.log("% LaTeX generated by gift2latex (npm package)")

if (argv.lyxexam) 
    console.log("\\begin{myquestions}"); else 
    console.log("\\begin{questions}")

for (let question of quiz) {
    switch (question.type) {
        case "MC":
            console.log(`\\${questionTag}[${questionPoints}]`)
            console.log(question.stem.text)
            console.log("\\begin{choices}")
            // https://stackoverflow.com/a/46545530/1168342
            let choices = argv.shuffle ? question.choices.map((a) => ({ sort: Math.random(), value: a }))
                .sort((a, b) => a.sort - b.sort)
                .map((a) => a.value) : question.choices;
            for (let choice of choices) {
                console.log("\\" + (choice.isCorrect ? "CorrectChoice " : "choice ") + choice.text.text)
            }
            console.log("\\end{choices}")
    }
}

if (argv.lyxexam) 
    console.log("\\end{myquestions}"); else 
    console.log("\\end{questions}")

process.exit(0);